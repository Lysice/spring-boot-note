## 一、Spring Boot入门

### Spring boot简介

简化spring应用开发 约定大于配置 去繁从简 just run 就能构建一个独立的 产品级别的应用。

#### 背景

J2EE笨重的开发 繁多的配置 低下的开发效率 复杂的部署流程 第三方技术集成难度大

#### 解决

Spring 全家桶 时代

Spring Boot ->J2EE一站式解决方案

Spring Cloud ->分布式整体解决方案

#### 优点

1 快速创建   

2 嵌入式的servlet容器 应用无需打包成War包 打成Jar包

3 starters自动依赖与版本控制  

4 自动配置 简化开发

5 无需配置xml 无代码生成 开箱即用

6 准生产级的运行时应用监控

7 与云集算天然集成



### 微服务

### 环境准备

jdk1.8

maven3.x 谷粒学院

idea2017

Spring boot1.5.9



#### 设置maven

`<profile>
  <id>jdk-1.8</id>
  <activation>
	  <activeByDefault>true</activeByDefault>
	  <jdk>1.8</jdk>
  <activation>
  <properties>
	<maven.compiler.source>1.8</maven.compiler.source>
	<maven.compiler.target>1.8</maven.compiler.target>
	<maven.compiler.compilerVersion>1.8</maven.compiler.compilerVersion>
  </properties>
</profile>`



#### idea设置

`configure->setting->plugin->build->maven` 勾选自己的maven

勾选重写



### Hello world

功能

浏览器发送请求 服务器响应 `Hello world`



#### 1.创建maven工程 (jar)

指定JDK 项目groupid articleid 目录等 完成。

`maven projects neetds to be imported`

选择自动导入

#### 2.导入Spring boot相关依赖

#### 3.编写一个主程序

`main->java下新建HelloworldApplication`



@SpringBootApplication注解 组合了三个主要的注解

1.Spring的 @Configuration 标明该类使用Spring基于Java的配置

2.Spring 的 @ComponentScan 启用组件扫描

这样你写的Web控制器类和其他组件才能被自动发现并注册为Spring应用程序上下文的bean。

3.@EnableAutoConfiguration 开启Spring boot的自动配置

```Java
@SpringBootApplication // 标注一个主程序类 说明这是一个Spring boot 应用 自动配置 组件扫描
public class DemoApplication {
   public static void main(String[] args) {
       // 启动Spring boot应用
      SpringApplication.run(DemoApplication.class, args);
   }
}
```

#### 4.编写Controller

```Java
@Controller
public class Hello {
    @ResponseBody
    @RequestMapping("/helloworld")
    public String hello()
    {
        return "Hello world";
    }
}
```



#### 5.运行主程序测试

`mvn spring-boot:run`

`localhost` 默认响应error page

#### 6.简化部署工作

##### 1.引入jar包 plugin

##### 2.mvn package执行

##### 3.maven package打包 成功后会在目录target中生成jar包。

##### 4.jar包拷贝到相对应的目录 在目录命令行运行 java -jar命令执行。

#### 7.HelloWorld细节与starter场景启动器

##### (1)pom文件

导入相关依赖 

`spring-boot-dependencies`来真正管理Spring Boot应用里面的所有依赖版本。是Spring Boot的版本仲裁中心。

以后我们导入依赖默认是不需要写版本的。

#### 启动器

`spring-boot-starter-web`

`spring-boot-starter` Spring Boot的场景启动器 又声明各种依赖导入 帮我们导入了web模块正常运行所依赖的组件。

而sb中还有更多的启动器。

starters是一系列依赖的组合。

Spring Boot将所有的功能场景抽取出来 做成一个个的starters 我们只需要再项目中引入start相关场景的依赖都会导入进来。要用什么功能就导入什么场景启动器。

#### (2)Helloworld细节 自动配置

```Java
package com.example.springboot01helloworld;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class SpringBoot01HelloworldApplication {

   public static void main(String[] args) {
      SpringApplication.run(SpringBoot01HelloworldApplication.class, args);
   }

}
```

@SpringBootApplication Spring Boot应用标注再某类上 说明这个类是Spring Boot的主配置类，Spring Boot就应该运行这类的main方法来启动Spring Boot应用。

```Java
@Target({ElementType.TYPE})
@Retention(RetentionPolicy.RUNTIME)
@Documented
@Inherited
@SpringBootConfiguration
@EnableAutoConfiguration
@ComponentScan(
    excludeFilters = {@Filter(
    type = FilterType.CUSTOM,
    classes = {TypeExcludeFilter.class}
), @Filter(
    type = FilterType.CUSTOM,
    classes = {AutoConfigurationExcludeFilter.class}
)}
)
public @interface SpringBootApplication {
```

上面是Spring Boot点击进去的组合注解。

1.

@SpringBootConfiguration` Spring Boot的配置类 标注在某个类上 表示这是一个Spring Boot的配置类。

`@Configuration` 配置类上标注该注解。

```Java
@Component
public @interface Configuration {
```

配置类也是容器中的一个组件。`@Component`

2.

```Java
@EnableAutoConfiguration 开启自动配置
```

以前我们需要配置的东西 Spring Boot帮我们自动配置。

```Java
@Target({ElementType.TYPE})
@Retention(RetentionPolicy.RUNTIME)
@Documented
@Inherited
@AutoConfigurationPackage
@Import({AutoConfigurationImportSelector.class})
public @interface EnableAutoConfiguration {
```

`@AutoConfigurationPackage` 自动配置包

```Java
@Target({ElementType.TYPE})
@Retention(RetentionPolicy.RUNTIME)
@Documented
@Inherited
@Import({Registrar.class})
public @interface AutoConfigurationPackage {
}
```

`@import`Spring Boot的底层注解  给容器中导入一个组件:

@Import({Registrar.class}) 导入的组件由import内指定。



Spring Boot注解版(谷粒学院)

debug调试

**`@AutoConfigurationPackage` 将主配置类 (@SpringBootApplication标注的**

`@Import({Registrar.class})` 导入哪个组件的选择器

将所有需要导入的组件以全类名的方式返回 这些组件就会被添加到容器中。

**类)所在包及包内所有组件扫描到Spring 容器。**

### 8.使用Spring initializer快速创建Spring Boot项目

IDE都支持。

idea社区版本 插件中心下载Spring Assistant即可。

`@RestController = @ResponseBody + @Controller`

resources文件夹目录结构

##### static 保存静态资源 js css images

##### templates 保存所有的模板页面 Spring Bootjar包使用嵌入式Tomcat 不支持JSP 可以使用模板引擎。

##### application.properties Spring Boot应用的配置文件





